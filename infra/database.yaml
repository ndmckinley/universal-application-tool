AWSTemplateFormatVersion: '2010-09-09'
Description: ''
Parameters:
  DBPassword:
    NoEcho: 'true'
    Description: Password for database access
    Type: String
  DBUsername:
    NoEcho: 'true'
    Description: Username for database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  PrivateSubnet1:
    Description: The private subnets to add the database to.
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2:
    Description: The private subnet to add the database to.
    Type: AWS::EC2::Subnet::Id
  DBSecurityGroup:
    Description: The security group to use for our database access control.
    Type: String
  DBClass:
    Description: The class to use for the DB - smaller for prod and larger for dev.
    Type: String
Resources:
  subnetgroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: two subnets for the database
      SubnetIds:
        - !Ref 'PrivateSubnet1'
        - !Ref 'PrivateSubnet2'
  postgresdb:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: postgres
      DBInstanceClass: !Ref DBClass
      AllocatedStorage: 50
      Engine: postgres
      EngineVersion: '12.5'
      MasterUsername: !Ref 'DBUsername'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${DBPassword}}}'
      DBSubnetGroupName: !Ref 'subnetgroup'
      VPCSecurityGroups:
        - !Ref 'DBSecurityGroup'
Outputs:
  DBPort:
    Description: The port on which the DB can be reached.
    Value: !GetAtt 'postgresdb.Endpoint.Port'
    Export:
      Name: !Sub '${AWS::StackName}-DBPort'
  DBAddress:
    Description: The address at which the DB can be reached.
    Value: !GetAtt 'postgresdb.Endpoint.Address'
    Export:
      Name: !Sub '${AWS::StackName}-DBAddress'
